OUTPUT_PATH = "./src/pymafia/ash/library.py"
open(OUTPUT_PATH, "w").close()

from pymafia import ash, datatypes, km  # noqa: E402


def annotate(jtype: km.Type) -> str:
    """Return the annotation for a type."""
    typespec = jtype.getType()
    if typespec == km.DataTypes.TypeSpec.ANY:
        return "Any"
    if typespec == km.DataTypes.TypeSpec.VOID:
        return "None"
    if typespec in ash.conversion.TYPESPEC_CONVERSIONS:
        return ash.conversion.TYPESPEC_CONVERSIONS[typespec].__name__
    if typespec == km.DataTypes.TypeSpec.MATCHER:
        return "Matcher"
    if isinstance(jtype, km.AggregateType):
        return (
            f"dict[{annotate(jtype.getIndexType())}, {annotate(jtype.getDataType())}]"
        )
    if jtype == km.DataTypes.AGGREGATE_TYPE:
        return "dict[Any, Any]"
    if isinstance(jtype, km.RecordType):
        return "dict[str, Any]"
    raise ValueError(jtype.toString())


def define_overload(function: km.RuntimeLibrary) -> str:
    """Return the overload definition for a function."""
    arg_names = function.getParameterNames()
    arg_types = [annotate(vr.getType()) for vr in function.getVariableReferences()]
    signature = ", ".join(": ".join(x) for x in zip(arg_names, arg_types))
    return_type = annotate(function.getType())
    return f"\n@overload\ndef {function.name}({signature}) -> {return_type}:\n\t...\n"


def get_function_names() -> list[str]:
    """Return the RuntimeLibrary function names sorted alphabetically."""
    return sorted({func.getName() for func in km.RuntimeLibrary.getFunctions()})


def define_all_functions() -> str:
    """Return the overloads and implementation for all RuntimeLibrary functions."""
    lines = []
    for name in get_function_names():
        functions = km.RuntimeLibrary.getFunctions().findFunctions(name)[::-1]
        lines.extend(define_overload(func) for func in functions)
        lines.append(
            f'\ndef {name}(*args):\n\treturn LibraryFunction("{name}")(*args)\n'
        )
    return "\n".join(lines)


if __name__ == "__main__":
    header = f"""# THIS FILE IS AUTOMATICALLY GENERATED. See tools/generate_ash_lib.py for more information.
__all__ = [{", ".join(repr(name) for name in get_function_names())}]

from typing import Any, overload

from pymafia.ash.conversion import Matcher
from pymafia.ash.function import LibraryFunction
from pymafia.datatypes import {", ".join(sorted([cls.__name__ for cls in datatypes.MAFIA_DATATYPES]))}

"""
    body = define_all_functions()

    with open(OUTPUT_PATH, "w") as f:
        f.write(header + body)
