from typing import Any

from pymafia import ash, datatypes, km


def annotate(jtype: Any) -> str:
    """Return the annotation for a KoLmafia Type."""
    typespec = jtype.getType()
    if typespec == km.DataTypes.TypeSpec.ANY:
        return "Any"
    if typespec == km.DataTypes.TypeSpec.VOID:
        return "None"
    if typespec in ash.conversion.TYPESPEC_CONVERSIONS:
        return ash.conversion.TYPESPEC_CONVERSIONS[typespec].__name__
    if typespec == km.DataTypes.TypeSpec.MATCHER:
        return "Matcher"
    if isinstance(jtype, km.AggregateType):
        return (
            f"dict[{annotate(jtype.getIndexType())}, {annotate(jtype.getDataType())}]"
        )
    if jtype == km.DataTypes.AGGREGATE_TYPE:
        return "dict[Any, Any]"
    if isinstance(jtype, km.RecordType):
        return "dict[str, Any]"
    raise ValueError(jtype.toString())


def get_function_names() -> list[str]:
    """Return the RuntimeLibrary function names sorted alphabetically."""
    return sorted({func.getName() for func in km.RuntimeLibrary.getFunctions()})


def generate_library(path: str) -> None:
    """Generate a file containing the overloads and implementation for all KoLmafia RuntimeLibrary functions."""
    lines = [
        "# THIS FILE IS AUTOMATICALLY GENERATED. See tools/generate_library.py for more information.",
        f'__all__ = [{", ".join(repr(name) for name in get_function_names())}]',
        "\n",
        "from typing import Any, overload",
        "\n",
        "from pymafia.ash.function import LibraryFunction",
        f'from pymafia.datatypes import {", ".join(sorted([cls.__name__ for cls in datatypes.SPECIAL_DATATYPES]))}, Matcher',
        "\n",
    ]

    for name in get_function_names():
        functions = km.RuntimeLibrary.getFunctions().findFunctions(name)[::-1]
        if len(functions) == 1:
            # Implementation
            function = functions[0]
            arg_names = function.getParameterNames()
            arg_types = [
                annotate(vr.getType()) for vr in function.getVariableReferences()
            ]
            signature = ", ".join(": ".join(x) for x in zip(arg_names, arg_types))
            return_type = annotate(function.getType())
            lines.append(
                f'\ndef {name}({signature}) -> {return_type}:\n\treturn LibraryFunction("{name}")({", ".join(arg_names)})\n'
            )
        else:
            # Overloads
            for function in functions:
                arg_names = function.getParameterNames()
                arg_types = [
                    annotate(vr.getType()) for vr in function.getVariableReferences()
                ]
                signature = ", ".join(": ".join(x) for x in zip(arg_names, arg_types))
                return_type = annotate(function.getType())
                lines.append(
                    f"\n@overload\ndef {function.name}({signature}) -> {return_type}:\n\t...\n"
                )
            # Implementation
            lines.append(
                f'\ndef {name}(*args):\n\treturn LibraryFunction("{name}")(*args)\n'
            )

    with open(path, "w") as f:
        f.write("\n".join(lines))


if __name__ == "__main__":
    generate_library("./src/pymafia/ash/library.py")
