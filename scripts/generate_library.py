from typing import Any

from pymafia import ash, datatypes, km


def annotate(jtype: Any) -> str:
    """Return the annotation for a KoLmafia Type."""
    jtypespec = jtype.getType()
    if jtypespec == km.DataTypes.TypeSpec.ANY:
        return "Any"
    if jtypespec == km.DataTypes.TypeSpec.VOID:
        return "None"
    if jtypespec in ash.conversion.TYPESPEC_CONVERSIONS:
        return ash.conversion.TYPESPEC_CONVERSIONS[jtypespec].__name__
    if jtypespec == km.DataTypes.TypeSpec.MATCHER:
        return "Matcher"
    if isinstance(jtype, km.AggregateType):
        return (
            f"dict[{annotate(jtype.getIndexType())}, {annotate(jtype.getDataType())}]"
        )
    if jtype == km.DataTypes.AGGREGATE_TYPE:
        return "dict[Any, Any]"
    if isinstance(jtype, km.RecordType):
        return "dict[str, Any]"
    raise ValueError(jtype.toString())


def generate_overload(function: Any) -> str:
    """Return the overload for a KoLmafia LibraryFunction."""
    arg_names = function.getParameterNames()
    arg_types = [annotate(vr.getType()) for vr in function.getVariableReferences()]
    signature = ", ".join(": ".join(x) for x in zip(arg_names, arg_types))
    return_type = annotate(function.getType())
    return (
        "\n"
        "@overload\n"
        f"def {function.name}({signature}) -> {return_type}:\n"
        "\t...\n"
        "\n"
    )


def generate_implementation(function, explicit: bool) -> str:
    """Return the implementation for a KoLmafia LibraryFunction."""
    function_name = function.getName()
    if not explicit:
        return (
            "\n"
            f"def {function_name}(*args):\n"
            f'\treturn LibraryFunction("{function_name}")(*args)\n'
            "\n"
        )

    arg_names = function.getParameterNames()
    arg_types = [annotate(vr.getType()) for vr in function.getVariableReferences()]
    signature = ", ".join(": ".join(x) for x in zip(arg_names, arg_types))
    return_type = annotate(function.getType())
    return (
        "\n"
        f"def {function_name}({signature}) -> {return_type}:\n"
        f'\treturn LibraryFunction("{function_name}")({", ".join(arg_names)})\n'
        "\n"
    )


def generate_library(path: str) -> None:
    """Generate a file containing the overloads and implementation for all KoLmafia RuntimeLibrary functions."""
    function_names = sorted(
        {func.getName() for func in km.RuntimeLibrary.getFunctions()}
    )
    lines = (
        "# THIS FILE IS AUTOMATICALLY GENERATED. See tools/generate_library.py for more information.\n"
        f'__all__ = [{", ".join(repr(name) for name in function_names)}]\n'
        "\n"
        "from typing import Any, overload\n"
        "\n"
        "from pymafia.ash.function import LibraryFunction\n"
        f'from pymafia.datatypes import {", ".join(sorted(cls.__name__ for cls in datatypes.SPECIAL_DATATYPES))}, Matcher\n'
        "\n"
    )

    for name in function_names:
        functions = km.RuntimeLibrary.getFunctions().findFunctions(name)[::-1]
        if len(functions) == 1:
            lines += generate_implementation(functions[0], explicit=True)
        else:
            for function in functions:
                lines += generate_overload(function)
            lines += generate_implementation(function, explicit=False)

    with open(path, "w") as f:
        f.write(lines)


if __name__ == "__main__":
    generate_library("./src/pymafia/ash/library.py")
