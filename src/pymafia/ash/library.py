# THIS FILE IS AUTOMATICALLY GENERATED. See tools/generate_ash_lib.py for more information.
__all__ = [
    "abort",
    "absorbed_monsters",
    "add_item_condition",
    "adv1",
    "adv_cost",
    "adventure",
    "all_monsters_with_id",
    "all_normal_outfits",
    "appearance_rates",
    "append",
    "append_replacement",
    "append_tail",
    "attack",
    "autosell",
    "autosell_price",
    "available_amount",
    "available_choice_options",
    "available_choice_select_inputs",
    "available_choice_text_inputs",
    "available_pocket",
    "batch_close",
    "batch_open",
    "bjornify_familiar",
    "black_market_available",
    "boolean_modifier",
    "buffed_hit_stat",
    "buffer_to_file",
    "buy",
    "buy_price",
    "buy_using_storage",
    "buys_item",
    "can_adventure",
    "can_drink",
    "can_eat",
    "can_equip",
    "can_faxbot",
    "can_interact",
    "can_still_steal",
    "canadia_available",
    "candy_for_tier",
    "ceil",
    "change_mcd",
    "char_at",
    "chat_clan",
    "chat_macro",
    "chat_notify",
    "chat_private",
    "chew",
    "choice_follows_fight",
    "class_modifier",
    "clear",
    "clear_booze_helper",
    "clear_food_helper",
    "cli_execute",
    "cli_execute_output",
    "closet_amount",
    "combat_mana_cost_modifier",
    "combat_rate_modifier",
    "combat_skill_available",
    "concoction_price",
    "contains_text",
    "council",
    "count",
    "craft",
    "craft_type",
    "creatable_amount",
    "creatable_turns",
    "create",
    "create_matcher",
    "current_hit_stat",
    "current_mcd",
    "current_pvp_stances",
    "current_rad_sickness",
    "current_round",
    "dad_sea_monkee_weakness",
    "daily_special",
    "damage_absorption_percent",
    "damage_reduction",
    "date_to_timestamp",
    "daycount",
    "debugprint",
    "delete",
    "desc_to_effect",
    "desc_to_item",
    "disable",
    "dispensary_available",
    "display_amount",
    "drink",
    "drinksilent",
    "dump",
    "eat",
    "eatsilent",
    "effect_modifier",
    "effect_pockets",
    "eight_bit_points",
    "elemental_resistance",
    "empty_closet",
    "enable",
    "end",
    "ends_with",
    "enthrone_familiar",
    "entity_decode",
    "entity_encode",
    "equip",
    "equip_all_familiars",
    "equipped_amount",
    "equipped_item",
    "eudora",
    "eudora_item",
    "every_card_name",
    "expected_cold_medicine_cabinet",
    "expected_damage",
    "experience_bonus",
    "expression_eval",
    "extract_items",
    "extract_meat",
    "familiar_equipment",
    "familiar_equipped_equipment",
    "familiar_weight",
    "favorite_familiars",
    "faxbot",
    "fight_follows_choice",
    "file_to_array",
    "file_to_buffer",
    "file_to_map",
    "find",
    "floor",
    "florist_available",
    "flush_monster_manuel_cache",
    "form_field",
    "form_fields",
    "format_date_time",
    "friars_available",
    "fuel_cost",
    "fullness_limit",
    "gameday_to_int",
    "gameday_to_string",
    "gametime_to_int",
    "get_all_properties",
    "get_auto_attack",
    "get_autumnaton_locations",
    "get_campground",
    "get_ccs_action",
    "get_chateau",
    "get_clan_id",
    "get_clan_lounge",
    "get_clan_name",
    "get_clan_rumpus",
    "get_closet",
    "get_counter",
    "get_counters",
    "get_custom_outfits",
    "get_display",
    "get_dwelling",
    "get_fishing_locations",
    "get_florist_plants",
    "get_free_pulls",
    "get_fuel",
    "get_goals",
    "get_ignore_zone_warnings",
    "get_ingredients",
    "get_inventory",
    "get_location_monsters",
    "get_locket_monsters",
    "get_monster_mapping",
    "get_monsters",
    "get_moods",
    "get_outfits",
    "get_path",
    "get_path_full",
    "get_path_variables",
    "get_permed_skills",
    "get_player_id",
    "get_player_name",
    "get_power",
    "get_property",
    "get_related",
    "get_revision",
    "get_shop",
    "get_shop_log",
    "get_stack_trace",
    "get_stash",
    "get_storage",
    "get_version",
    "get_workshed",
    "get_zap_wand",
    "git_at_head",
    "git_exists",
    "git_info",
    "git_list",
    "gnomads_available",
    "goal_exists",
    "group",
    "group_count",
    "group_names",
    "group_string",
    "guild_available",
    "guild_store_available",
    "handling_choice",
    "have_bartender",
    "have_chef",
    "have_display",
    "have_effect",
    "have_equipped",
    "have_familiar",
    "have_mushroom_plot",
    "have_outfit",
    "have_servant",
    "have_shop",
    "have_skill",
    "hedge_maze",
    "heist",
    "heist_targets",
    "hermit",
    "hidden_temple_unlocked",
    "hippy_stone_broken",
    "hippy_store_available",
    "historical_age",
    "historical_price",
    "holiday",
    "hp_cost",
    "image_to_monster",
    "in_bad_moon",
    "in_casual",
    "in_hardcore",
    "in_moxie_sign",
    "in_multi_fight",
    "in_muscle_sign",
    "in_mysticality_sign",
    "in_terrarium",
    "inaccessible_reason",
    "index_of",
    "inebriety_limit",
    "initiative_modifier",
    "insert",
    "is_accessible",
    "is_banished",
    "is_coinmaster_item",
    "is_dark_mode",
    "is_discardable",
    "is_displayable",
    "is_familiar_equipment_locked",
    "is_giftable",
    "is_goal",
    "is_headless",
    "is_integer",
    "is_npc_item",
    "is_online",
    "is_tradeable",
    "is_trendy",
    "is_unrestricted",
    "is_wearing_outfit",
    "item_amount",
    "item_drop_modifier",
    "item_drops",
    "item_drops_array",
    "item_pockets",
    "item_type",
    "join_strings",
    "joke_pockets",
    "jump_chance",
    "knoll_available",
    "last_choice",
    "last_decision",
    "last_index_of",
    "last_item_message",
    "last_monster",
    "last_skill_message",
    "leetify",
    "length",
    "lightning_cost",
    "limit_mode",
    "load_html",
    "lock_familiar_equipment",
    "log_n",
    "logprint",
    "make_url",
    "mall_price",
    "mall_prices",
    "mana_cost_modifier",
    "map_to_file",
    "max",
    "maximize",
    "meat_drop",
    "meat_drop_modifier",
    "meat_pockets",
    "min",
    "minstrel_instrument",
    "minstrel_level",
    "minstrel_quest",
    "modifier_eval",
    "monkey_paw",
    "monster_attack",
    "monster_defense",
    "monster_element",
    "monster_eval",
    "monster_factoids_available",
    "monster_hp",
    "monster_initiative",
    "monster_level_adjustment",
    "monster_manuel_text",
    "monster_modifier",
    "monster_phylum",
    "monster_pockets",
    "mood_execute",
    "mood_list",
    "moon_light",
    "moon_phase",
    "mp_cost",
    "my_absorbs",
    "my_adventures",
    "my_ascensions",
    "my_audience",
    "my_basestat",
    "my_bjorned_familiar",
    "my_buffedstat",
    "my_class",
    "my_closet_meat",
    "my_companion",
    "my_daycount",
    "my_discomomentum",
    "my_effective_familiar",
    "my_effects",
    "my_enthroned_familiar",
    "my_familiar",
    "my_fullness",
    "my_fury",
    "my_garden_type",
    "my_hash",
    "my_hp",
    "my_id",
    "my_inebriety",
    "my_level",
    "my_lightning",
    "my_location",
    "my_mask",
    "my_maxfury",
    "my_maxhp",
    "my_maxmp",
    "my_maxpp",
    "my_meat",
    "my_mp",
    "my_name",
    "my_path",
    "my_path_id",
    "my_poke_fam",
    "my_pp",
    "my_primestat",
    "my_rain",
    "my_robot_energy",
    "my_robot_scraps",
    "my_servant",
    "my_session_adv",
    "my_session_items",
    "my_session_meat",
    "my_session_results",
    "my_sign",
    "my_soulsauce",
    "my_spleen_use",
    "my_storage_meat",
    "my_thrall",
    "my_thunder",
    "my_turncount",
    "my_vykea_companion",
    "my_wildfire_water",
    "now_to_int",
    "now_to_string",
    "npc_price",
    "numberology_prize",
    "numeric_modifier",
    "outfit",
    "outfit_pieces",
    "outfit_tattoo",
    "outfit_treats",
    "overdrink",
    "path_id_to_name",
    "path_name_to_id",
    "pick_pocket",
    "picked_pockets",
    "picked_scraps",
    "ping",
    "pocket_effects",
    "pocket_items",
    "pocket_joke",
    "pocket_meat",
    "pocket_monster",
    "pocket_poem",
    "pocket_scrap",
    "pocket_stats",
    "poem_pockets",
    "potential_pockets",
    "pre_validate_adventure",
    "prepare_for_adventure",
    "print",
    "print_html",
    "property_default_value",
    "property_exists",
    "property_has_default",
    "pulls_remaining",
    "put_closet",
    "put_display",
    "put_shop",
    "put_shop_using_storage",
    "put_stash",
    "pvp_attacks_left",
    "rain_cost",
    "random",
    "raw_damage_absorption",
    "read_ccs",
    "receive_fax",
    "refresh_shop",
    "refresh_stash",
    "refresh_status",
    "remove_item_condition",
    "remove_property",
    "rename_property",
    "replace",
    "replace_all",
    "replace_first",
    "replace_string",
    "reprice_shop",
    "reset",
    "restoration_pockets",
    "restore_hp",
    "restore_mp",
    "retrieve_item",
    "retrieve_price",
    "reverse_numberology",
    "rollover",
    "round",
    "run_choice",
    "run_combat",
    "run_turn",
    "runaway",
    "sausage_goblin_chance",
    "scrap_pockets",
    "sell",
    "sell_price",
    "sells_item",
    "send_fax",
    "session_logs",
    "set_auto_attack",
    "set_ccs",
    "set_length",
    "set_location",
    "set_property",
    "shop_amount",
    "shop_limit",
    "shop_price",
    "skill_modifier",
    "slash_count",
    "soulsauce_cost",
    "spleen_limit",
    "split_modifiers",
    "split_string",
    "square_root",
    "start",
    "starts_with",
    "stash_amount",
    "stat_bonus_today",
    "stat_bonus_tomorrow",
    "stat_modifier",
    "stats_pockets",
    "steal",
    "stills_available",
    "stop_counter",
    "storage_amount",
    "string_modifier",
    "stun_skill",
    "substring",
    "svn_at_head",
    "svn_exists",
    "svn_info",
    "svn_list",
    "sweet_synthesis",
    "sweet_synthesis_pair",
    "sweet_synthesis_pairing",
    "sweet_synthesis_result",
    "take_closet",
    "take_display",
    "take_shop",
    "take_stash",
    "take_storage",
    "tavern",
    "throw_item",
    "throw_items",
    "thunder_cost",
    "time_to_string",
    "timestamp_to_date",
    "to_boolean",
    "to_bounty",
    "to_class",
    "to_coinmaster",
    "to_effect",
    "to_element",
    "to_familiar",
    "to_float",
    "to_int",
    "to_item",
    "to_json",
    "to_location",
    "to_lower_case",
    "to_monster",
    "to_path",
    "to_phylum",
    "to_plural",
    "to_servant",
    "to_skill",
    "to_slot",
    "to_stat",
    "to_string",
    "to_thrall",
    "to_upper_case",
    "to_url",
    "to_vykea",
    "to_wiki_url",
    "today_to_string",
    "total_free_rests",
    "total_turns_played",
    "tower_door",
    "traceprint",
    "truncate",
    "turns_per_cast",
    "turns_played",
    "twiddle",
    "unusual_construct_disc",
    "update_candy_prices",
    "url_decode",
    "url_encode",
    "use",
    "use_familiar",
    "use_servant",
    "use_skill",
    "user_confirm",
    "user_notify",
    "user_prompt",
    "visit",
    "visit_url",
    "voting_booth_initiatives",
    "wait",
    "waitq",
    "weapon_hands",
    "weapon_type",
    "weight_adjustment",
    "well_stocked",
    "white_citadel_available",
    "who_clan",
    "will_usually_dodge",
    "will_usually_miss",
    "write",
    "write_ccs",
    "writeln",
    "xpath",
    "zap",
]

from typing import Any, overload

from pymafia.ash.function import LibraryFunction
from pymafia.datatypes import (
    Bounty,
    Class,
    Coinmaster,
    Effect,
    Element,
    Familiar,
    Item,
    Location,
    Modifier,
    Monster,
    Path,
    Phylum,
    Servant,
    Skill,
    Slot,
    Stat,
    Thrall,
    Vykea,
)

Matcher = Any


@overload
def abort() -> None:
    ...


@overload
def abort(arg1: str) -> None:
    ...


def abort(*args):
    return LibraryFunction("abort")(*args)


def absorbed_monsters() -> dict[Monster, bool]:
    return LibraryFunction("absorbed_monsters")()


@overload
def add_item_condition(arg1: Item, arg2: int) -> None:
    ...


@overload
def add_item_condition(arg1: int, arg2: Item) -> None:
    ...


def add_item_condition(*args):
    return LibraryFunction("add_item_condition")(*args)


@overload
def adv1(arg1: Location) -> bool:
    ...


@overload
def adv1(arg1: Location, arg2: int) -> bool:
    ...


@overload
def adv1(arg1: Location, arg2: int, arg3: str) -> bool:
    ...


def adv1(*args):
    return LibraryFunction("adv1")(*args)


def adv_cost(arg1: Skill) -> int:
    return LibraryFunction("adv_cost")(arg1)


@overload
def adventure(arg1: int, arg2: Location, arg3: str) -> bool:
    ...


@overload
def adventure(arg1: int, arg2: Location) -> bool:
    ...


@overload
def adventure(arg1: Location, arg2: int, arg3: str) -> bool:
    ...


@overload
def adventure(arg1: Location, arg2: int) -> bool:
    ...


def adventure(*args):
    return LibraryFunction("adventure")(*args)


def all_monsters_with_id() -> dict[Monster, bool]:
    return LibraryFunction("all_monsters_with_id")()


def all_normal_outfits() -> dict[int, str]:
    return LibraryFunction("all_normal_outfits")()


@overload
def appearance_rates(arg1: Location, arg2: bool) -> dict[Monster, float]:
    ...


@overload
def appearance_rates(arg1: Location) -> dict[Monster, float]:
    ...


def appearance_rates(*args):
    return LibraryFunction("appearance_rates")(*args)


def append(arg1: str, arg2: str) -> str:
    return LibraryFunction("append")(arg1, arg2)


def append_replacement(arg1: Matcher, arg2: str, arg3: str) -> str:
    return LibraryFunction("append_replacement")(arg1, arg2, arg3)


def append_tail(arg1: Matcher, arg2: str) -> str:
    return LibraryFunction("append_tail")(arg1, arg2)


def attack() -> str:
    return LibraryFunction("attack")()


@overload
def autosell(arg1: int, arg2: Item) -> bool:
    ...


@overload
def autosell(arg1: Item, arg2: int) -> bool:
    ...


def autosell(*args):
    return LibraryFunction("autosell")(*args)


def autosell_price(arg1: Item) -> int:
    return LibraryFunction("autosell_price")(arg1)


def available_amount(arg1: Item) -> int:
    return LibraryFunction("available_amount")(arg1)


@overload
def available_choice_options(arg1: bool) -> dict[int, str]:
    ...


@overload
def available_choice_options() -> dict[int, str]:
    ...


def available_choice_options(*args):
    return LibraryFunction("available_choice_options")(*args)


def available_choice_select_inputs(arg1: int) -> dict[str, dict[str, str]]:
    return LibraryFunction("available_choice_select_inputs")(arg1)


def available_choice_text_inputs(arg1: int) -> dict[str, str]:
    return LibraryFunction("available_choice_text_inputs")(arg1)


@overload
def available_pocket(arg1: Stat) -> int:
    ...


@overload
def available_pocket(arg1: Item) -> int:
    ...


@overload
def available_pocket(arg1: Effect) -> int:
    ...


@overload
def available_pocket(arg1: Monster) -> int:
    ...


def available_pocket(*args):
    return LibraryFunction("available_pocket")(*args)


def batch_close() -> bool:
    return LibraryFunction("batch_close")()


def batch_open() -> None:
    return LibraryFunction("batch_open")()


def bjornify_familiar(arg1: Familiar) -> bool:
    return LibraryFunction("bjornify_familiar")(arg1)


def black_market_available() -> bool:
    return LibraryFunction("black_market_available")()


@overload
def boolean_modifier(arg1: Effect, arg2: Modifier) -> bool:
    ...


@overload
def boolean_modifier(arg1: Effect, arg2: str) -> bool:
    ...


@overload
def boolean_modifier(arg1: Item, arg2: Modifier) -> bool:
    ...


@overload
def boolean_modifier(arg1: Item, arg2: str) -> bool:
    ...


@overload
def boolean_modifier(arg1: str, arg2: Modifier) -> bool:
    ...


@overload
def boolean_modifier(arg1: str, arg2: str) -> bool:
    ...


@overload
def boolean_modifier(arg1: Modifier) -> bool:
    ...


@overload
def boolean_modifier(arg1: str) -> bool:
    ...


def boolean_modifier(*args):
    return LibraryFunction("boolean_modifier")(*args)


def buffed_hit_stat() -> int:
    return LibraryFunction("buffed_hit_stat")()


def buffer_to_file(arg1: str, arg2: str) -> bool:
    return LibraryFunction("buffer_to_file")(arg1, arg2)


@overload
def buy(arg1: Coinmaster, arg2: int, arg3: Item) -> bool:
    ...


@overload
def buy(arg1: int, arg2: Item, arg3: int) -> int:
    ...


@overload
def buy(arg1: int, arg2: Item) -> bool:
    ...


@overload
def buy(arg1: Item, arg2: int, arg3: int) -> int:
    ...


@overload
def buy(arg1: Item, arg2: int) -> bool:
    ...


@overload
def buy(arg1: Item) -> bool:
    ...


def buy(*args):
    return LibraryFunction("buy")(*args)


def buy_price(arg1: Coinmaster, arg2: Item) -> int:
    return LibraryFunction("buy_price")(arg1, arg2)


@overload
def buy_using_storage(arg1: int, arg2: Item, arg3: int) -> int:
    ...


@overload
def buy_using_storage(arg1: int, arg2: Item) -> bool:
    ...


@overload
def buy_using_storage(arg1: Item, arg2: int, arg3: int) -> int:
    ...


@overload
def buy_using_storage(arg1: Item, arg2: int) -> bool:
    ...


@overload
def buy_using_storage(arg1: Item) -> bool:
    ...


def buy_using_storage(*args):
    return LibraryFunction("buy_using_storage")(*args)


def buys_item(arg1: Coinmaster, arg2: Item) -> bool:
    return LibraryFunction("buys_item")(arg1, arg2)


def can_adventure(arg1: Location) -> bool:
    return LibraryFunction("can_adventure")(arg1)


def can_drink() -> bool:
    return LibraryFunction("can_drink")()


def can_eat() -> bool:
    return LibraryFunction("can_eat")()


@overload
def can_equip(arg1: Familiar, arg2: Item) -> bool:
    ...


@overload
def can_equip(arg1: Familiar) -> bool:
    ...


@overload
def can_equip(arg1: Item) -> bool:
    ...


def can_equip(*args):
    return LibraryFunction("can_equip")(*args)


def can_faxbot(arg1: Monster) -> bool:
    return LibraryFunction("can_faxbot")(arg1)


def can_interact() -> bool:
    return LibraryFunction("can_interact")()


def can_still_steal() -> bool:
    return LibraryFunction("can_still_steal")()


def canadia_available() -> bool:
    return LibraryFunction("canadia_available")()


@overload
def candy_for_tier(arg1: int, arg2: int) -> dict[int, Item]:
    ...


@overload
def candy_for_tier(arg1: int) -> dict[int, Item]:
    ...


def candy_for_tier(*args):
    return LibraryFunction("candy_for_tier")(*args)


def ceil(arg1: float) -> int:
    return LibraryFunction("ceil")(arg1)


def change_mcd(arg1: int) -> bool:
    return LibraryFunction("change_mcd")(arg1)


def char_at(arg1: str, arg2: int) -> str:
    return LibraryFunction("char_at")(arg1, arg2)


@overload
def chat_clan(arg1: str, arg2: str) -> None:
    ...


@overload
def chat_clan(arg1: str) -> None:
    ...


def chat_clan(*args):
    return LibraryFunction("chat_clan")(*args)


def chat_macro(arg1: str) -> None:
    return LibraryFunction("chat_macro")(arg1)


def chat_notify(arg1: str, arg2: str) -> None:
    return LibraryFunction("chat_notify")(arg1, arg2)


def chat_private(arg1: str, arg2: str) -> None:
    return LibraryFunction("chat_private")(arg1, arg2)


@overload
def chew(arg1: int, arg2: Item) -> bool:
    ...


@overload
def chew(arg1: Item, arg2: int) -> bool:
    ...


@overload
def chew(arg1: Item) -> bool:
    ...


def chew(*args):
    return LibraryFunction("chew")(*args)


def choice_follows_fight() -> bool:
    return LibraryFunction("choice_follows_fight")()


@overload
def class_modifier(arg1: Item, arg2: Modifier) -> Class:
    ...


@overload
def class_modifier(arg1: Item, arg2: str) -> Class:
    ...


@overload
def class_modifier(arg1: str, arg2: Modifier) -> Class:
    ...


@overload
def class_modifier(arg1: str, arg2: str) -> Class:
    ...


def class_modifier(*args):
    return LibraryFunction("class_modifier")(*args)


def clear(arg1: dict[Any, Any]) -> None:
    return LibraryFunction("clear")(arg1)


def clear_booze_helper() -> None:
    return LibraryFunction("clear_booze_helper")()


def clear_food_helper() -> None:
    return LibraryFunction("clear_food_helper")()


def cli_execute(arg1: str) -> bool:
    return LibraryFunction("cli_execute")(arg1)


def cli_execute_output(arg1: str) -> str:
    return LibraryFunction("cli_execute_output")(arg1)


def closet_amount(arg1: Item) -> int:
    return LibraryFunction("closet_amount")(arg1)


def combat_mana_cost_modifier() -> int:
    return LibraryFunction("combat_mana_cost_modifier")()


def combat_rate_modifier() -> float:
    return LibraryFunction("combat_rate_modifier")()


def combat_skill_available(arg1: Skill) -> bool:
    return LibraryFunction("combat_skill_available")(arg1)


@overload
def concoction_price(arg1: Vykea) -> int:
    ...


@overload
def concoction_price(arg1: Item) -> int:
    ...


def concoction_price(*args):
    return LibraryFunction("concoction_price")(*args)


def contains_text(arg1: str, arg2: str) -> bool:
    return LibraryFunction("contains_text")(arg1, arg2)


def council() -> None:
    return LibraryFunction("council")()


def count(arg1: dict[Any, Any]) -> int:
    return LibraryFunction("count")(arg1)


def craft(arg1: str, arg2: int, arg3: Item, arg4: Item) -> int:
    return LibraryFunction("craft")(arg1, arg2, arg3, arg4)


def craft_type(arg1: Item) -> str:
    return LibraryFunction("craft_type")(arg1)


def creatable_amount(arg1: Item) -> int:
    return LibraryFunction("creatable_amount")(arg1)


@overload
def creatable_turns(arg1: Item, arg2: int, arg3: bool) -> int:
    ...


@overload
def creatable_turns(arg1: Item, arg2: int) -> int:
    ...


@overload
def creatable_turns(arg1: Item) -> int:
    ...


def creatable_turns(*args):
    return LibraryFunction("creatable_turns")(*args)


@overload
def create(arg1: int, arg2: Item) -> bool:
    ...


@overload
def create(arg1: Item, arg2: int) -> bool:
    ...


@overload
def create(arg1: Item) -> bool:
    ...


def create(*args):
    return LibraryFunction("create")(*args)


def create_matcher(arg1: str, arg2: str) -> Matcher:
    return LibraryFunction("create_matcher")(arg1, arg2)


def current_hit_stat() -> Stat:
    return LibraryFunction("current_hit_stat")()


def current_mcd() -> int:
    return LibraryFunction("current_mcd")()


def current_pvp_stances() -> dict[str, int]:
    return LibraryFunction("current_pvp_stances")()


def current_rad_sickness() -> int:
    return LibraryFunction("current_rad_sickness")()


def current_round() -> int:
    return LibraryFunction("current_round")()


def dad_sea_monkee_weakness(arg1: int) -> Element:
    return LibraryFunction("dad_sea_monkee_weakness")(arg1)


def daily_special() -> Item:
    return LibraryFunction("daily_special")()


def damage_absorption_percent() -> float:
    return LibraryFunction("damage_absorption_percent")()


def damage_reduction() -> int:
    return LibraryFunction("damage_reduction")()


def date_to_timestamp(arg1: str, arg2: str) -> int:
    return LibraryFunction("date_to_timestamp")(arg1, arg2)


def daycount() -> int:
    return LibraryFunction("daycount")()


def debugprint(arg1: str) -> None:
    return LibraryFunction("debugprint")(arg1)


def delete(arg1: str, arg2: int, arg3: int) -> str:
    return LibraryFunction("delete")(arg1, arg2, arg3)


def desc_to_effect(arg1: str) -> Effect:
    return LibraryFunction("desc_to_effect")(arg1)


def desc_to_item(arg1: str) -> Item:
    return LibraryFunction("desc_to_item")(arg1)


def disable(arg1: str) -> None:
    return LibraryFunction("disable")(arg1)


def dispensary_available() -> bool:
    return LibraryFunction("dispensary_available")()


def display_amount(arg1: Item) -> int:
    return LibraryFunction("display_amount")(arg1)


@overload
def drink(arg1: int, arg2: Item) -> bool:
    ...


@overload
def drink(arg1: Item, arg2: int) -> bool:
    ...


@overload
def drink(arg1: Item) -> bool:
    ...


def drink(*args):
    return LibraryFunction("drink")(*args)


@overload
def drinksilent(arg1: int, arg2: Item) -> bool:
    ...


@overload
def drinksilent(arg1: Item, arg2: int) -> bool:
    ...


@overload
def drinksilent(arg1: Item) -> bool:
    ...


def drinksilent(*args):
    return LibraryFunction("drinksilent")(*args)


@overload
def dump(arg1: Any, arg2: str) -> None:
    ...


@overload
def dump(arg1: Any) -> None:
    ...


def dump(*args):
    return LibraryFunction("dump")(*args)


@overload
def eat(arg1: int, arg2: Item) -> bool:
    ...


@overload
def eat(arg1: Item, arg2: int) -> bool:
    ...


@overload
def eat(arg1: Item) -> bool:
    ...


def eat(*args):
    return LibraryFunction("eat")(*args)


@overload
def eatsilent(arg1: int, arg2: Item) -> bool:
    ...


@overload
def eatsilent(arg1: Item, arg2: int) -> bool:
    ...


@overload
def eatsilent(arg1: Item) -> bool:
    ...


def eatsilent(*args):
    return LibraryFunction("eatsilent")(*args)


@overload
def effect_modifier(arg1: Item, arg2: Modifier) -> Effect:
    ...


@overload
def effect_modifier(arg1: Item, arg2: str) -> Effect:
    ...


@overload
def effect_modifier(arg1: str, arg2: Modifier) -> Effect:
    ...


@overload
def effect_modifier(arg1: str, arg2: str) -> Effect:
    ...


def effect_modifier(*args):
    return LibraryFunction("effect_modifier")(*args)


def effect_pockets() -> dict[int, bool]:
    return LibraryFunction("effect_pockets")()


@overload
def eight_bit_points(arg1: Location, arg2: str, arg3: float) -> int:
    ...


@overload
def eight_bit_points(arg1: Location) -> int:
    ...


def eight_bit_points(*args):
    return LibraryFunction("eight_bit_points")(*args)


@overload
def elemental_resistance(arg1: Monster) -> float:
    ...


@overload
def elemental_resistance() -> float:
    ...


@overload
def elemental_resistance(arg1: Element) -> float:
    ...


def elemental_resistance(*args):
    return LibraryFunction("elemental_resistance")(*args)


def empty_closet() -> bool:
    return LibraryFunction("empty_closet")()


def enable(arg1: str) -> None:
    return LibraryFunction("enable")(arg1)


@overload
def end(arg1: Matcher, arg2: int) -> int:
    ...


@overload
def end(arg1: Matcher) -> int:
    ...


def end(*args):
    return LibraryFunction("end")(*args)


def ends_with(arg1: str, arg2: str) -> bool:
    return LibraryFunction("ends_with")(arg1, arg2)


def enthrone_familiar(arg1: Familiar) -> bool:
    return LibraryFunction("enthrone_familiar")(arg1)


def entity_decode(arg1: str) -> str:
    return LibraryFunction("entity_decode")(arg1)


def entity_encode(arg1: str) -> str:
    return LibraryFunction("entity_encode")(arg1)


@overload
def equip(arg1: Familiar, arg2: Item) -> bool:
    ...


@overload
def equip(arg1: Item, arg2: Familiar) -> bool:
    ...


@overload
def equip(arg1: Slot, arg2: Item) -> bool:
    ...


@overload
def equip(arg1: Item, arg2: Slot) -> bool:
    ...


@overload
def equip(arg1: Item) -> bool:
    ...


def equip(*args):
    return LibraryFunction("equip")(*args)


def equip_all_familiars() -> bool:
    return LibraryFunction("equip_all_familiars")()


@overload
def equipped_amount(arg1: Item, arg2: bool) -> int:
    ...


@overload
def equipped_amount(arg1: Item) -> int:
    ...


def equipped_amount(*args):
    return LibraryFunction("equipped_amount")(*args)


def equipped_item(arg1: Slot) -> Item:
    return LibraryFunction("equipped_item")(arg1)


@overload
def eudora(arg1: str) -> bool:
    ...


@overload
def eudora() -> str:
    ...


def eudora(*args):
    return LibraryFunction("eudora")(*args)


def eudora_item() -> Item:
    return LibraryFunction("eudora_item")()


def every_card_name(arg1: str) -> str:
    return LibraryFunction("every_card_name")(arg1)


def expected_cold_medicine_cabinet() -> dict[str, Item]:
    return LibraryFunction("expected_cold_medicine_cabinet")()


@overload
def expected_damage(arg1: Monster) -> int:
    ...


@overload
def expected_damage() -> int:
    ...


def expected_damage(*args):
    return LibraryFunction("expected_damage")(*args)


def experience_bonus() -> float:
    return LibraryFunction("experience_bonus")()


def expression_eval(arg1: str) -> float:
    return LibraryFunction("expression_eval")(arg1)


def extract_items(arg1: str) -> dict[Item, int]:
    return LibraryFunction("extract_items")(arg1)


def extract_meat(arg1: str) -> int:
    return LibraryFunction("extract_meat")(arg1)


def familiar_equipment(arg1: Familiar) -> Item:
    return LibraryFunction("familiar_equipment")(arg1)


def familiar_equipped_equipment(arg1: Familiar) -> Item:
    return LibraryFunction("familiar_equipped_equipment")(arg1)


def familiar_weight(arg1: Familiar) -> int:
    return LibraryFunction("familiar_weight")(arg1)


def favorite_familiars() -> dict[Familiar, bool]:
    return LibraryFunction("favorite_familiars")()


@overload
def faxbot(arg1: Monster, arg2: str) -> bool:
    ...


@overload
def faxbot(arg1: Monster) -> bool:
    ...


def faxbot(*args):
    return LibraryFunction("faxbot")(*args)


def fight_follows_choice() -> bool:
    return LibraryFunction("fight_follows_choice")()


def file_to_array(arg1: str) -> dict[int, str]:
    return LibraryFunction("file_to_array")(arg1)


def file_to_buffer(arg1: str) -> str:
    return LibraryFunction("file_to_buffer")(arg1)


@overload
def file_to_map(arg1: str, arg2: dict[Any, Any], arg3: bool) -> bool:
    ...


@overload
def file_to_map(arg1: str, arg2: dict[Any, Any]) -> bool:
    ...


def file_to_map(*args):
    return LibraryFunction("file_to_map")(*args)


def find(arg1: Matcher) -> bool:
    return LibraryFunction("find")(arg1)


def floor(arg1: float) -> int:
    return LibraryFunction("floor")(arg1)


def florist_available() -> bool:
    return LibraryFunction("florist_available")()


def flush_monster_manuel_cache() -> bool:
    return LibraryFunction("flush_monster_manuel_cache")()


def form_field(arg1: str) -> str:
    return LibraryFunction("form_field")(arg1)


def form_fields() -> dict[str, str]:
    return LibraryFunction("form_fields")()


def format_date_time(arg1: str, arg2: str, arg3: str) -> str:
    return LibraryFunction("format_date_time")(arg1, arg2, arg3)


def friars_available() -> bool:
    return LibraryFunction("friars_available")()


def fuel_cost(arg1: Skill) -> int:
    return LibraryFunction("fuel_cost")(arg1)


def fullness_limit() -> int:
    return LibraryFunction("fullness_limit")()


def gameday_to_int() -> int:
    return LibraryFunction("gameday_to_int")()


def gameday_to_string() -> str:
    return LibraryFunction("gameday_to_string")()


def gametime_to_int() -> int:
    return LibraryFunction("gametime_to_int")()


def get_all_properties(arg1: str, arg2: bool) -> dict[str, bool]:
    return LibraryFunction("get_all_properties")(arg1, arg2)


def get_auto_attack() -> int:
    return LibraryFunction("get_auto_attack")()


def get_autumnaton_locations() -> dict[int, Location]:
    return LibraryFunction("get_autumnaton_locations")()


def get_campground() -> dict[Item, int]:
    return LibraryFunction("get_campground")()


def get_ccs_action(arg1: int) -> str:
    return LibraryFunction("get_ccs_action")(arg1)


def get_chateau() -> dict[Item, int]:
    return LibraryFunction("get_chateau")()


def get_clan_id() -> int:
    return LibraryFunction("get_clan_id")()


def get_clan_lounge() -> dict[Item, int]:
    return LibraryFunction("get_clan_lounge")()


def get_clan_name() -> str:
    return LibraryFunction("get_clan_name")()


def get_clan_rumpus() -> dict[str, int]:
    return LibraryFunction("get_clan_rumpus")()


def get_closet() -> dict[Item, int]:
    return LibraryFunction("get_closet")()


def get_counter(arg1: str) -> int:
    return LibraryFunction("get_counter")(arg1)


def get_counters(arg1: str, arg2: int, arg3: int) -> str:
    return LibraryFunction("get_counters")(arg1, arg2, arg3)


def get_custom_outfits() -> dict[int, str]:
    return LibraryFunction("get_custom_outfits")()


def get_display() -> dict[Item, int]:
    return LibraryFunction("get_display")()


def get_dwelling() -> Item:
    return LibraryFunction("get_dwelling")()


def get_fishing_locations() -> dict[str, Location]:
    return LibraryFunction("get_fishing_locations")()


def get_florist_plants() -> dict[Location, dict[int, str]]:
    return LibraryFunction("get_florist_plants")()


def get_free_pulls() -> dict[Item, int]:
    return LibraryFunction("get_free_pulls")()


def get_fuel() -> int:
    return LibraryFunction("get_fuel")()


def get_goals() -> dict[int, str]:
    return LibraryFunction("get_goals")()


def get_ignore_zone_warnings() -> bool:
    return LibraryFunction("get_ignore_zone_warnings")()


def get_ingredients(arg1: Item) -> dict[Item, int]:
    return LibraryFunction("get_ingredients")(arg1)


def get_inventory() -> dict[Item, int]:
    return LibraryFunction("get_inventory")()


def get_location_monsters(arg1: Location) -> dict[Monster, bool]:
    return LibraryFunction("get_location_monsters")(arg1)


def get_locket_monsters() -> dict[Monster, bool]:
    return LibraryFunction("get_locket_monsters")()


@overload
def get_monster_mapping(arg1: str) -> dict[Monster, Monster]:
    ...


@overload
def get_monster_mapping() -> dict[Monster, Monster]:
    ...


def get_monster_mapping(*args):
    return LibraryFunction("get_monster_mapping")(*args)


def get_monsters(arg1: Location) -> dict[int, Monster]:
    return LibraryFunction("get_monsters")(arg1)


def get_moods() -> dict[int, str]:
    return LibraryFunction("get_moods")()


def get_outfits() -> dict[int, str]:
    return LibraryFunction("get_outfits")()


def get_path() -> str:
    return LibraryFunction("get_path")()


def get_path_full() -> str:
    return LibraryFunction("get_path_full")()


def get_path_variables() -> str:
    return LibraryFunction("get_path_variables")()


def get_permed_skills() -> dict[Skill, bool]:
    return LibraryFunction("get_permed_skills")()


def get_player_id(arg1: str) -> str:
    return LibraryFunction("get_player_id")(arg1)


def get_player_name(arg1: int) -> str:
    return LibraryFunction("get_player_name")(arg1)


def get_power(arg1: Item) -> int:
    return LibraryFunction("get_power")(arg1)


@overload
def get_property(arg1: str, arg2: bool) -> str:
    ...


@overload
def get_property(arg1: str) -> str:
    ...


def get_property(*args):
    return LibraryFunction("get_property")(*args)


def get_related(arg1: Item, arg2: str) -> dict[Item, int]:
    return LibraryFunction("get_related")(arg1, arg2)


def get_revision() -> int:
    return LibraryFunction("get_revision")()


def get_shop() -> dict[Item, int]:
    return LibraryFunction("get_shop")()


def get_shop_log() -> dict[int, str]:
    return LibraryFunction("get_shop_log")()


def get_stack_trace() -> dict[int, dict[str, Any]]:
    return LibraryFunction("get_stack_trace")()


def get_stash() -> dict[Item, int]:
    return LibraryFunction("get_stash")()


def get_storage() -> dict[Item, int]:
    return LibraryFunction("get_storage")()


def get_version() -> str:
    return LibraryFunction("get_version")()


def get_workshed() -> Item:
    return LibraryFunction("get_workshed")()


def get_zap_wand() -> Item:
    return LibraryFunction("get_zap_wand")()


def git_at_head(arg1: str) -> bool:
    return LibraryFunction("git_at_head")(arg1)


def git_exists(arg1: str) -> bool:
    return LibraryFunction("git_exists")(arg1)


def git_info(arg1: str) -> dict[str, Any]:
    return LibraryFunction("git_info")(arg1)


def git_list() -> dict[int, str]:
    return LibraryFunction("git_list")()


def gnomads_available() -> bool:
    return LibraryFunction("gnomads_available")()


def goal_exists(arg1: str) -> bool:
    return LibraryFunction("goal_exists")(arg1)


@overload
def group(arg1: Matcher, arg2: str) -> str:
    ...


@overload
def group(arg1: Matcher, arg2: int) -> str:
    ...


@overload
def group(arg1: Matcher) -> str:
    ...


def group(*args):
    return LibraryFunction("group")(*args)


def group_count(arg1: Matcher) -> int:
    return LibraryFunction("group_count")(arg1)


def group_names(arg1: Matcher) -> dict[str, bool]:
    return LibraryFunction("group_names")(arg1)


def group_string(arg1: str, arg2: str) -> dict[int, dict[int, str]]:
    return LibraryFunction("group_string")(arg1, arg2)


def guild_available() -> bool:
    return LibraryFunction("guild_available")()


def guild_store_available() -> bool:
    return LibraryFunction("guild_store_available")()


def handling_choice() -> bool:
    return LibraryFunction("handling_choice")()


def have_bartender() -> bool:
    return LibraryFunction("have_bartender")()


def have_chef() -> bool:
    return LibraryFunction("have_chef")()


def have_display() -> bool:
    return LibraryFunction("have_display")()


def have_effect(arg1: Effect) -> int:
    return LibraryFunction("have_effect")(arg1)


def have_equipped(arg1: Item) -> bool:
    return LibraryFunction("have_equipped")(arg1)


def have_familiar(arg1: Familiar) -> bool:
    return LibraryFunction("have_familiar")(arg1)


def have_mushroom_plot() -> bool:
    return LibraryFunction("have_mushroom_plot")()


def have_outfit(arg1: str) -> bool:
    return LibraryFunction("have_outfit")(arg1)


def have_servant(arg1: Servant) -> bool:
    return LibraryFunction("have_servant")(arg1)


def have_shop() -> bool:
    return LibraryFunction("have_shop")()


def have_skill(arg1: Skill) -> bool:
    return LibraryFunction("have_skill")(arg1)


def hedge_maze(arg1: str) -> bool:
    return LibraryFunction("hedge_maze")(arg1)


@overload
def heist(arg1: int, arg2: Item) -> bool:
    ...


@overload
def heist(arg1: Item) -> bool:
    ...


def heist(*args):
    return LibraryFunction("heist")(*args)


def heist_targets() -> dict[Monster, dict[int, Item]]:
    return LibraryFunction("heist_targets")()


@overload
def hermit(arg1: int, arg2: Item) -> bool:
    ...


@overload
def hermit(arg1: Item, arg2: int) -> bool:
    ...


def hermit(*args):
    return LibraryFunction("hermit")(*args)


def hidden_temple_unlocked() -> bool:
    return LibraryFunction("hidden_temple_unlocked")()


def hippy_stone_broken() -> bool:
    return LibraryFunction("hippy_stone_broken")()


def hippy_store_available() -> bool:
    return LibraryFunction("hippy_store_available")()


def historical_age(arg1: Item) -> float:
    return LibraryFunction("historical_age")(arg1)


def historical_price(arg1: Item) -> int:
    return LibraryFunction("historical_price")(arg1)


def holiday() -> str:
    return LibraryFunction("holiday")()


def hp_cost(arg1: Skill) -> int:
    return LibraryFunction("hp_cost")(arg1)


def image_to_monster(arg1: str) -> Monster:
    return LibraryFunction("image_to_monster")(arg1)


def in_bad_moon() -> bool:
    return LibraryFunction("in_bad_moon")()


def in_casual() -> bool:
    return LibraryFunction("in_casual")()


def in_hardcore() -> bool:
    return LibraryFunction("in_hardcore")()


def in_moxie_sign() -> bool:
    return LibraryFunction("in_moxie_sign")()


def in_multi_fight() -> bool:
    return LibraryFunction("in_multi_fight")()


def in_muscle_sign() -> bool:
    return LibraryFunction("in_muscle_sign")()


def in_mysticality_sign() -> bool:
    return LibraryFunction("in_mysticality_sign")()


def in_terrarium(arg1: Familiar) -> bool:
    return LibraryFunction("in_terrarium")(arg1)


def inaccessible_reason(arg1: Coinmaster) -> str:
    return LibraryFunction("inaccessible_reason")(arg1)


@overload
def index_of(arg1: str, arg2: str, arg3: int) -> int:
    ...


@overload
def index_of(arg1: str, arg2: str) -> int:
    ...


def index_of(*args):
    return LibraryFunction("index_of")(*args)


def inebriety_limit() -> int:
    return LibraryFunction("inebriety_limit")()


def initiative_modifier() -> float:
    return LibraryFunction("initiative_modifier")()


def insert(arg1: str, arg2: int, arg3: str) -> str:
    return LibraryFunction("insert")(arg1, arg2, arg3)


def is_accessible(arg1: Coinmaster) -> bool:
    return LibraryFunction("is_accessible")(arg1)


def is_banished(arg1: Monster) -> bool:
    return LibraryFunction("is_banished")(arg1)


def is_coinmaster_item(arg1: Item) -> bool:
    return LibraryFunction("is_coinmaster_item")(arg1)


def is_dark_mode() -> bool:
    return LibraryFunction("is_dark_mode")()


def is_discardable(arg1: Item) -> bool:
    return LibraryFunction("is_discardable")(arg1)


def is_displayable(arg1: Item) -> bool:
    return LibraryFunction("is_displayable")(arg1)


def is_familiar_equipment_locked() -> bool:
    return LibraryFunction("is_familiar_equipment_locked")()


def is_giftable(arg1: Item) -> bool:
    return LibraryFunction("is_giftable")(arg1)


def is_goal(arg1: Item) -> bool:
    return LibraryFunction("is_goal")(arg1)


def is_headless() -> bool:
    return LibraryFunction("is_headless")()


def is_integer(arg1: str) -> bool:
    return LibraryFunction("is_integer")(arg1)


def is_npc_item(arg1: Item) -> bool:
    return LibraryFunction("is_npc_item")(arg1)


def is_online(arg1: str) -> bool:
    return LibraryFunction("is_online")(arg1)


def is_tradeable(arg1: Item) -> bool:
    return LibraryFunction("is_tradeable")(arg1)


@overload
def is_trendy(arg1: str) -> bool:
    ...


@overload
def is_trendy(arg1: Familiar) -> bool:
    ...


@overload
def is_trendy(arg1: Skill) -> bool:
    ...


@overload
def is_trendy(arg1: Item) -> bool:
    ...


def is_trendy(*args):
    return LibraryFunction("is_trendy")(*args)


@overload
def is_unrestricted(arg1: str) -> bool:
    ...


@overload
def is_unrestricted(arg1: Familiar) -> bool:
    ...


@overload
def is_unrestricted(arg1: Skill) -> bool:
    ...


@overload
def is_unrestricted(arg1: Item) -> bool:
    ...


def is_unrestricted(*args):
    return LibraryFunction("is_unrestricted")(*args)


def is_wearing_outfit(arg1: str) -> bool:
    return LibraryFunction("is_wearing_outfit")(arg1)


def item_amount(arg1: Item) -> int:
    return LibraryFunction("item_amount")(arg1)


def item_drop_modifier() -> float:
    return LibraryFunction("item_drop_modifier")()


@overload
def item_drops(arg1: Monster) -> dict[Item, float]:
    ...


@overload
def item_drops() -> dict[Item, float]:
    ...


def item_drops(*args):
    return LibraryFunction("item_drops")(*args)


@overload
def item_drops_array(arg1: Monster) -> dict[int, dict[str, Any]]:
    ...


@overload
def item_drops_array() -> dict[int, dict[str, Any]]:
    ...


def item_drops_array(*args):
    return LibraryFunction("item_drops_array")(*args)


def item_pockets() -> dict[int, bool]:
    return LibraryFunction("item_pockets")()


def item_type(arg1: Item) -> str:
    return LibraryFunction("item_type")(arg1)


@overload
def join_strings(arg1: dict[int, str], arg2: str) -> str:
    ...


@overload
def join_strings(arg1: dict[int, str]) -> str:
    ...


def join_strings(*args):
    return LibraryFunction("join_strings")(*args)


def joke_pockets() -> dict[int, bool]:
    return LibraryFunction("joke_pockets")()


@overload
def jump_chance(arg1: Location, arg2: int, arg3: int) -> int:
    ...


@overload
def jump_chance(arg1: Location, arg2: int) -> int:
    ...


@overload
def jump_chance(arg1: Location) -> int:
    ...


@overload
def jump_chance(arg1: Monster, arg2: int, arg3: int) -> int:
    ...


@overload
def jump_chance(arg1: Monster, arg2: int) -> int:
    ...


@overload
def jump_chance(arg1: Monster) -> int:
    ...


@overload
def jump_chance() -> int:
    ...


def jump_chance(*args):
    return LibraryFunction("jump_chance")(*args)


def knoll_available() -> bool:
    return LibraryFunction("knoll_available")()


def last_choice() -> int:
    return LibraryFunction("last_choice")()


def last_decision() -> int:
    return LibraryFunction("last_decision")()


@overload
def last_index_of(arg1: str, arg2: str, arg3: int) -> int:
    ...


@overload
def last_index_of(arg1: str, arg2: str) -> int:
    ...


def last_index_of(*args):
    return LibraryFunction("last_index_of")(*args)


def last_item_message() -> str:
    return LibraryFunction("last_item_message")()


def last_monster() -> Monster:
    return LibraryFunction("last_monster")()


def last_skill_message() -> str:
    return LibraryFunction("last_skill_message")()


def leetify(arg1: str) -> str:
    return LibraryFunction("leetify")(arg1)


def length(arg1: str) -> int:
    return LibraryFunction("length")(arg1)


def lightning_cost(arg1: Skill) -> int:
    return LibraryFunction("lightning_cost")(arg1)


def limit_mode() -> str:
    return LibraryFunction("limit_mode")()


def load_html(arg1: str) -> str:
    return LibraryFunction("load_html")(arg1)


def lock_familiar_equipment(arg1: bool) -> None:
    return LibraryFunction("lock_familiar_equipment")(arg1)


@overload
def log_n(arg1: float, arg2: float) -> float:
    ...


@overload
def log_n(arg1: float) -> float:
    ...


def log_n(*args):
    return LibraryFunction("log_n")(*args)


def logprint(arg1: str) -> None:
    return LibraryFunction("logprint")(arg1)


def make_url(arg1: str, arg2: bool, arg3: bool) -> str:
    return LibraryFunction("make_url")(arg1, arg2, arg3)


@overload
def mall_price(arg1: Item, arg2: float) -> int:
    ...


@overload
def mall_price(arg1: Item) -> int:
    ...


def mall_price(*args):
    return LibraryFunction("mall_price")(*args)


@overload
def mall_prices(arg1: str, arg2: str) -> int:
    ...


@overload
def mall_prices(arg1: str) -> int:
    ...


@overload
def mall_prices(arg1: dict[int, bool]) -> int:
    ...


def mall_prices(*args):
    return LibraryFunction("mall_prices")(*args)


def mana_cost_modifier() -> int:
    return LibraryFunction("mana_cost_modifier")()


@overload
def map_to_file(arg1: dict[Any, Any], arg2: str, arg3: bool) -> bool:
    ...


@overload
def map_to_file(arg1: dict[Any, Any], arg2: str) -> bool:
    ...


def map_to_file(*args):
    return LibraryFunction("map_to_file")(*args)


@overload
def max(arg1: int, arg2: dict[int, int]) -> int:
    ...


@overload
def max(arg1: float, arg2: dict[int, float]) -> float:
    ...


def max(*args):
    return LibraryFunction("max")(*args)


@overload
def maximize(
    arg1: str, arg2: int, arg3: int, arg4: bool, arg5: bool
) -> dict[int, dict[str, Any]]:
    ...


@overload
def maximize(arg1: str, arg2: int, arg3: int, arg4: bool) -> bool:
    ...


@overload
def maximize(arg1: str, arg2: bool) -> bool:
    ...


def maximize(*args):
    return LibraryFunction("maximize")(*args)


@overload
def meat_drop(arg1: Monster) -> int:
    ...


@overload
def meat_drop() -> int:
    ...


def meat_drop(*args):
    return LibraryFunction("meat_drop")(*args)


def meat_drop_modifier() -> float:
    return LibraryFunction("meat_drop_modifier")()


def meat_pockets() -> dict[int, int]:
    return LibraryFunction("meat_pockets")()


@overload
def min(arg1: int, arg2: dict[int, int]) -> int:
    ...


@overload
def min(arg1: float, arg2: dict[int, float]) -> float:
    ...


def min(*args):
    return LibraryFunction("min")(*args)


def minstrel_instrument() -> Item:
    return LibraryFunction("minstrel_instrument")()


def minstrel_level() -> int:
    return LibraryFunction("minstrel_level")()


def minstrel_quest() -> bool:
    return LibraryFunction("minstrel_quest")()


def modifier_eval(arg1: str) -> float:
    return LibraryFunction("modifier_eval")(arg1)


@overload
def monkey_paw(arg1: str) -> bool:
    ...


@overload
def monkey_paw(arg1: Effect) -> bool:
    ...


@overload
def monkey_paw(arg1: Item) -> bool:
    ...


def monkey_paw(*args):
    return LibraryFunction("monkey_paw")(*args)


@overload
def monster_attack(arg1: Monster) -> int:
    ...


@overload
def monster_attack() -> int:
    ...


def monster_attack(*args):
    return LibraryFunction("monster_attack")(*args)


@overload
def monster_defense(arg1: Monster) -> int:
    ...


@overload
def monster_defense() -> int:
    ...


def monster_defense(*args):
    return LibraryFunction("monster_defense")(*args)


@overload
def monster_element(arg1: Monster) -> Element:
    ...


@overload
def monster_element() -> Element:
    ...


def monster_element(*args):
    return LibraryFunction("monster_element")(*args)


def monster_eval(arg1: str) -> float:
    return LibraryFunction("monster_eval")(arg1)


def monster_factoids_available(arg1: Monster, arg2: bool) -> int:
    return LibraryFunction("monster_factoids_available")(arg1, arg2)


@overload
def monster_hp(arg1: Monster) -> int:
    ...


@overload
def monster_hp() -> int:
    ...


def monster_hp(*args):
    return LibraryFunction("monster_hp")(*args)


@overload
def monster_initiative(arg1: Monster) -> int:
    ...


@overload
def monster_initiative() -> int:
    ...


def monster_initiative(*args):
    return LibraryFunction("monster_initiative")(*args)


def monster_level_adjustment() -> int:
    return LibraryFunction("monster_level_adjustment")()


def monster_manuel_text(arg1: Monster) -> str:
    return LibraryFunction("monster_manuel_text")(arg1)


@overload
def monster_modifier(arg1: Effect, arg2: Modifier) -> Monster:
    ...


@overload
def monster_modifier(arg1: Effect, arg2: str) -> Monster:
    ...


def monster_modifier(*args):
    return LibraryFunction("monster_modifier")(*args)


@overload
def monster_phylum(arg1: Monster) -> Phylum:
    ...


@overload
def monster_phylum() -> Phylum:
    ...


def monster_phylum(*args):
    return LibraryFunction("monster_phylum")(*args)


def monster_pockets() -> dict[int, bool]:
    return LibraryFunction("monster_pockets")()


def mood_execute(arg1: int) -> None:
    return LibraryFunction("mood_execute")(arg1)


def mood_list() -> dict[int, str]:
    return LibraryFunction("mood_list")()


def moon_light() -> int:
    return LibraryFunction("moon_light")()


def moon_phase() -> int:
    return LibraryFunction("moon_phase")()


def mp_cost(arg1: Skill) -> int:
    return LibraryFunction("mp_cost")(arg1)


def my_absorbs() -> int:
    return LibraryFunction("my_absorbs")()


def my_adventures() -> int:
    return LibraryFunction("my_adventures")()


def my_ascensions() -> int:
    return LibraryFunction("my_ascensions")()


def my_audience() -> int:
    return LibraryFunction("my_audience")()


def my_basestat(arg1: Stat) -> int:
    return LibraryFunction("my_basestat")(arg1)


def my_bjorned_familiar() -> Familiar:
    return LibraryFunction("my_bjorned_familiar")()


def my_buffedstat(arg1: Stat) -> int:
    return LibraryFunction("my_buffedstat")(arg1)


def my_class() -> Class:
    return LibraryFunction("my_class")()


def my_closet_meat() -> int:
    return LibraryFunction("my_closet_meat")()


def my_companion() -> str:
    return LibraryFunction("my_companion")()


def my_daycount() -> int:
    return LibraryFunction("my_daycount")()


def my_discomomentum() -> int:
    return LibraryFunction("my_discomomentum")()


def my_effective_familiar() -> Familiar:
    return LibraryFunction("my_effective_familiar")()


def my_effects() -> dict[Effect, int]:
    return LibraryFunction("my_effects")()


def my_enthroned_familiar() -> Familiar:
    return LibraryFunction("my_enthroned_familiar")()


def my_familiar() -> Familiar:
    return LibraryFunction("my_familiar")()


def my_fullness() -> int:
    return LibraryFunction("my_fullness")()


def my_fury() -> int:
    return LibraryFunction("my_fury")()


def my_garden_type() -> str:
    return LibraryFunction("my_garden_type")()


def my_hash() -> str:
    return LibraryFunction("my_hash")()


def my_hp() -> int:
    return LibraryFunction("my_hp")()


def my_id() -> str:
    return LibraryFunction("my_id")()


def my_inebriety() -> int:
    return LibraryFunction("my_inebriety")()


def my_level() -> int:
    return LibraryFunction("my_level")()


def my_lightning() -> int:
    return LibraryFunction("my_lightning")()


def my_location() -> Location:
    return LibraryFunction("my_location")()


def my_mask() -> str:
    return LibraryFunction("my_mask")()


def my_maxfury() -> int:
    return LibraryFunction("my_maxfury")()


def my_maxhp() -> int:
    return LibraryFunction("my_maxhp")()


def my_maxmp() -> int:
    return LibraryFunction("my_maxmp")()


def my_maxpp() -> int:
    return LibraryFunction("my_maxpp")()


def my_meat() -> int:
    return LibraryFunction("my_meat")()


def my_mp() -> int:
    return LibraryFunction("my_mp")()


def my_name() -> str:
    return LibraryFunction("my_name")()


def my_path() -> Path:
    return LibraryFunction("my_path")()


def my_path_id() -> int:
    return LibraryFunction("my_path_id")()


def my_poke_fam(arg1: int) -> Familiar:
    return LibraryFunction("my_poke_fam")(arg1)


def my_pp() -> int:
    return LibraryFunction("my_pp")()


def my_primestat() -> Stat:
    return LibraryFunction("my_primestat")()


def my_rain() -> int:
    return LibraryFunction("my_rain")()


def my_robot_energy() -> int:
    return LibraryFunction("my_robot_energy")()


def my_robot_scraps() -> int:
    return LibraryFunction("my_robot_scraps")()


def my_servant() -> Servant:
    return LibraryFunction("my_servant")()


def my_session_adv() -> int:
    return LibraryFunction("my_session_adv")()


@overload
def my_session_items(arg1: Item) -> int:
    ...


@overload
def my_session_items() -> dict[Item, int]:
    ...


def my_session_items(*args):
    return LibraryFunction("my_session_items")(*args)


def my_session_meat() -> int:
    return LibraryFunction("my_session_meat")()


def my_session_results() -> dict[str, int]:
    return LibraryFunction("my_session_results")()


def my_sign() -> str:
    return LibraryFunction("my_sign")()


def my_soulsauce() -> int:
    return LibraryFunction("my_soulsauce")()


def my_spleen_use() -> int:
    return LibraryFunction("my_spleen_use")()


def my_storage_meat() -> int:
    return LibraryFunction("my_storage_meat")()


def my_thrall() -> Thrall:
    return LibraryFunction("my_thrall")()


def my_thunder() -> int:
    return LibraryFunction("my_thunder")()


def my_turncount() -> int:
    return LibraryFunction("my_turncount")()


def my_vykea_companion() -> Vykea:
    return LibraryFunction("my_vykea_companion")()


def my_wildfire_water() -> int:
    return LibraryFunction("my_wildfire_water")()


def now_to_int() -> int:
    return LibraryFunction("now_to_int")()


def now_to_string(arg1: str) -> str:
    return LibraryFunction("now_to_string")(arg1)


def npc_price(arg1: Item) -> int:
    return LibraryFunction("npc_price")(arg1)


def numberology_prize(arg1: int) -> str:
    return LibraryFunction("numberology_prize")(arg1)


@overload
def numeric_modifier(arg1: Thrall, arg2: Modifier) -> float:
    ...


@overload
def numeric_modifier(arg1: Thrall, arg2: str) -> float:
    ...


@overload
def numeric_modifier(arg1: Familiar, arg2: str, arg3: int, arg4: Item) -> float:
    ...


@overload
def numeric_modifier(arg1: Skill, arg2: Modifier) -> float:
    ...


@overload
def numeric_modifier(arg1: Skill, arg2: str) -> float:
    ...


@overload
def numeric_modifier(arg1: Effect, arg2: Modifier) -> float:
    ...


@overload
def numeric_modifier(arg1: Effect, arg2: str) -> float:
    ...


@overload
def numeric_modifier(arg1: Item, arg2: Modifier) -> float:
    ...


@overload
def numeric_modifier(arg1: Item, arg2: str) -> float:
    ...


@overload
def numeric_modifier(arg1: str, arg2: Modifier) -> float:
    ...


@overload
def numeric_modifier(arg1: str, arg2: str) -> float:
    ...


@overload
def numeric_modifier(arg1: Modifier) -> float:
    ...


@overload
def numeric_modifier(arg1: str) -> float:
    ...


def numeric_modifier(*args):
    return LibraryFunction("numeric_modifier")(*args)


def outfit(arg1: str) -> bool:
    return LibraryFunction("outfit")(arg1)


def outfit_pieces(arg1: str) -> dict[int, Item]:
    return LibraryFunction("outfit_pieces")(arg1)


def outfit_tattoo(arg1: str) -> str:
    return LibraryFunction("outfit_tattoo")(arg1)


def outfit_treats(arg1: str) -> dict[Item, float]:
    return LibraryFunction("outfit_treats")(arg1)


@overload
def overdrink(arg1: int, arg2: Item) -> bool:
    ...


@overload
def overdrink(arg1: Item, arg2: int) -> bool:
    ...


@overload
def overdrink(arg1: Item) -> bool:
    ...


def overdrink(*args):
    return LibraryFunction("overdrink")(*args)


def path_id_to_name(arg1: int) -> str:
    return LibraryFunction("path_id_to_name")(arg1)


def path_name_to_id(arg1: str) -> int:
    return LibraryFunction("path_name_to_id")(arg1)


@overload
def pick_pocket(arg1: int) -> bool:
    ...


@overload
def pick_pocket(arg1: Stat) -> dict[Stat, int]:
    ...


@overload
def pick_pocket(arg1: Item) -> dict[Item, int]:
    ...


@overload
def pick_pocket(arg1: Effect) -> dict[Effect, int]:
    ...


@overload
def pick_pocket(arg1: Monster) -> bool:
    ...


def pick_pocket(*args):
    return LibraryFunction("pick_pocket")(*args)


def picked_pockets() -> dict[int, bool]:
    return LibraryFunction("picked_pockets")()


def picked_scraps() -> dict[int, bool]:
    return LibraryFunction("picked_scraps")()


@overload
def ping(arg1: str) -> dict[str, Any]:
    ...


@overload
def ping(arg1: int, arg2: str) -> dict[str, Any]:
    ...


@overload
def ping() -> dict[str, Any]:
    ...


def ping(*args):
    return LibraryFunction("ping")(*args)


def pocket_effects(arg1: int) -> dict[Effect, int]:
    return LibraryFunction("pocket_effects")(arg1)


def pocket_items(arg1: int) -> dict[Item, int]:
    return LibraryFunction("pocket_items")(arg1)


def pocket_joke(arg1: int) -> str:
    return LibraryFunction("pocket_joke")(arg1)


def pocket_meat(arg1: int) -> dict[int, str]:
    return LibraryFunction("pocket_meat")(arg1)


def pocket_monster(arg1: int) -> Monster:
    return LibraryFunction("pocket_monster")(arg1)


def pocket_poem(arg1: int) -> dict[int, str]:
    return LibraryFunction("pocket_poem")(arg1)


def pocket_scrap(arg1: int) -> dict[int, str]:
    return LibraryFunction("pocket_scrap")(arg1)


def pocket_stats(arg1: int) -> dict[Stat, int]:
    return LibraryFunction("pocket_stats")(arg1)


def poem_pockets() -> dict[int, int]:
    return LibraryFunction("poem_pockets")()


@overload
def potential_pockets(arg1: Stat) -> dict[int, int]:
    ...


@overload
def potential_pockets(arg1: Item) -> dict[int, int]:
    ...


@overload
def potential_pockets(arg1: Effect) -> dict[int, int]:
    ...


@overload
def potential_pockets(arg1: Monster) -> dict[int, int]:
    ...


def potential_pockets(*args):
    return LibraryFunction("potential_pockets")(*args)


def pre_validate_adventure(arg1: Location) -> bool:
    return LibraryFunction("pre_validate_adventure")(arg1)


def prepare_for_adventure(arg1: Location) -> bool:
    return LibraryFunction("prepare_for_adventure")(arg1)


@overload
def print(arg1: str, arg2: str) -> None:
    ...


@overload
def print(arg1: str) -> None:
    ...


@overload
def print() -> None:
    ...


def print(*args):
    return LibraryFunction("print")(*args)


@overload
def print_html(arg1: str) -> None:
    ...


@overload
def print_html(arg1: str, arg2: bool) -> None:
    ...


def print_html(*args):
    return LibraryFunction("print_html")(*args)


def property_default_value(arg1: str) -> str:
    return LibraryFunction("property_default_value")(arg1)


@overload
def property_exists(arg1: str, arg2: bool) -> bool:
    ...


@overload
def property_exists(arg1: str) -> bool:
    ...


def property_exists(*args):
    return LibraryFunction("property_exists")(*args)


def property_has_default(arg1: str) -> bool:
    return LibraryFunction("property_has_default")(arg1)


def pulls_remaining() -> int:
    return LibraryFunction("pulls_remaining")()


@overload
def put_closet(arg1: int, arg2: Item) -> bool:
    ...


@overload
def put_closet(arg1: Item, arg2: int) -> bool:
    ...


@overload
def put_closet(arg1: Item) -> bool:
    ...


@overload
def put_closet(arg1: int) -> bool:
    ...


def put_closet(*args):
    return LibraryFunction("put_closet")(*args)


@overload
def put_display(arg1: Item, arg2: int) -> bool:
    ...


@overload
def put_display(arg1: int, arg2: Item) -> bool:
    ...


def put_display(*args):
    return LibraryFunction("put_display")(*args)


@overload
def put_shop(arg1: int, arg2: int, arg3: int, arg4: Item) -> bool:
    ...


@overload
def put_shop(arg1: int, arg2: int, arg3: Item) -> bool:
    ...


def put_shop(*args):
    return LibraryFunction("put_shop")(*args)


@overload
def put_shop_using_storage(arg1: int, arg2: int, arg3: int, arg4: Item) -> bool:
    ...


@overload
def put_shop_using_storage(arg1: int, arg2: int, arg3: Item) -> bool:
    ...


def put_shop_using_storage(*args):
    return LibraryFunction("put_shop_using_storage")(*args)


@overload
def put_stash(arg1: int, arg2: Item) -> bool:
    ...


@overload
def put_stash(arg1: Item, arg2: int) -> bool:
    ...


def put_stash(*args):
    return LibraryFunction("put_stash")(*args)


def pvp_attacks_left() -> int:
    return LibraryFunction("pvp_attacks_left")()


def rain_cost(arg1: Skill) -> int:
    return LibraryFunction("rain_cost")(arg1)


def random(arg1: int) -> int:
    return LibraryFunction("random")(arg1)


def raw_damage_absorption() -> int:
    return LibraryFunction("raw_damage_absorption")()


def read_ccs(arg1: str) -> str:
    return LibraryFunction("read_ccs")(arg1)


def receive_fax() -> None:
    return LibraryFunction("receive_fax")()


def refresh_shop() -> bool:
    return LibraryFunction("refresh_shop")()


def refresh_stash() -> bool:
    return LibraryFunction("refresh_stash")()


def refresh_status() -> bool:
    return LibraryFunction("refresh_status")()


@overload
def remove_item_condition(arg1: Item, arg2: int) -> None:
    ...


@overload
def remove_item_condition(arg1: int, arg2: Item) -> None:
    ...


def remove_item_condition(*args):
    return LibraryFunction("remove_item_condition")(*args)


@overload
def remove_property(arg1: str, arg2: bool) -> str:
    ...


@overload
def remove_property(arg1: str) -> str:
    ...


def remove_property(*args):
    return LibraryFunction("remove_property")(*args)


def rename_property(arg1: str, arg2: str) -> bool:
    return LibraryFunction("rename_property")(arg1, arg2)


def replace(arg1: str, arg2: int, arg3: int, arg4: str) -> str:
    return LibraryFunction("replace")(arg1, arg2, arg3, arg4)


def replace_all(arg1: Matcher, arg2: str) -> str:
    return LibraryFunction("replace_all")(arg1, arg2)


def replace_first(arg1: Matcher, arg2: str) -> str:
    return LibraryFunction("replace_first")(arg1, arg2)


@overload
def replace_string(arg1: str, arg2: str, arg3: str) -> str:
    ...


@overload
def replace_string(arg1: str, arg2: str, arg3: str) -> str:
    ...


def replace_string(*args):
    return LibraryFunction("replace_string")(*args)


@overload
def reprice_shop(arg1: int, arg2: int, arg3: Item) -> bool:
    ...


@overload
def reprice_shop(arg1: int, arg2: Item) -> bool:
    ...


def reprice_shop(*args):
    return LibraryFunction("reprice_shop")(*args)


@overload
def reset(arg1: Matcher, arg2: str) -> Matcher:
    ...


@overload
def reset(arg1: Matcher) -> Matcher:
    ...


def reset(*args):
    return LibraryFunction("reset")(*args)


def restoration_pockets() -> dict[int, bool]:
    return LibraryFunction("restoration_pockets")()


def restore_hp(arg1: int) -> bool:
    return LibraryFunction("restore_hp")(arg1)


def restore_mp(arg1: int) -> bool:
    return LibraryFunction("restore_mp")(arg1)


@overload
def retrieve_item(arg1: int, arg2: Item) -> bool:
    ...


@overload
def retrieve_item(arg1: Item, arg2: int) -> bool:
    ...


@overload
def retrieve_item(arg1: Item) -> bool:
    ...


def retrieve_item(*args):
    return LibraryFunction("retrieve_item")(*args)


@overload
def retrieve_price(arg1: int, arg2: Item, arg3: bool) -> int:
    ...


@overload
def retrieve_price(arg1: Item, arg2: int, arg3: bool) -> int:
    ...


@overload
def retrieve_price(arg1: int, arg2: Item) -> int:
    ...


@overload
def retrieve_price(arg1: Item, arg2: int) -> int:
    ...


@overload
def retrieve_price(arg1: Item) -> int:
    ...


def retrieve_price(*args):
    return LibraryFunction("retrieve_price")(*args)


@overload
def reverse_numberology(arg1: int, arg2: int) -> dict[int, int]:
    ...


@overload
def reverse_numberology() -> dict[int, int]:
    ...


def reverse_numberology(*args):
    return LibraryFunction("reverse_numberology")(*args)


def rollover() -> int:
    return LibraryFunction("rollover")()


def round(arg1: float) -> int:
    return LibraryFunction("round")(arg1)


@overload
def run_choice(arg1: int, arg2: bool, arg3: str) -> str:
    ...


@overload
def run_choice(arg1: int, arg2: bool) -> str:
    ...


@overload
def run_choice(arg1: int, arg2: str) -> str:
    ...


@overload
def run_choice(arg1: int) -> str:
    ...


def run_choice(*args):
    return LibraryFunction("run_choice")(*args)


@overload
def run_combat(arg1: str) -> str:
    ...


@overload
def run_combat() -> str:
    ...


def run_combat(*args):
    return LibraryFunction("run_combat")(*args)


def run_turn() -> str:
    return LibraryFunction("run_turn")()


def runaway() -> str:
    return LibraryFunction("runaway")()


def sausage_goblin_chance() -> float:
    return LibraryFunction("sausage_goblin_chance")()


def scrap_pockets() -> dict[int, int]:
    return LibraryFunction("scrap_pockets")()


def sell(arg1: Coinmaster, arg2: int, arg3: Item) -> bool:
    return LibraryFunction("sell")(arg1, arg2, arg3)


def sell_price(arg1: Coinmaster, arg2: Item) -> int:
    return LibraryFunction("sell_price")(arg1, arg2)


def sells_item(arg1: Coinmaster, arg2: Item) -> bool:
    return LibraryFunction("sells_item")(arg1, arg2)


def send_fax() -> None:
    return LibraryFunction("send_fax")()


@overload
def session_logs(arg1: str, arg2: str, arg3: int) -> dict[int, str]:
    ...


@overload
def session_logs(arg1: str, arg2: int) -> dict[int, str]:
    ...


@overload
def session_logs(arg1: int) -> dict[int, str]:
    ...


def session_logs(*args):
    return LibraryFunction("session_logs")(*args)


@overload
def set_auto_attack(arg1: str) -> None:
    ...


@overload
def set_auto_attack(arg1: int) -> None:
    ...


def set_auto_attack(*args):
    return LibraryFunction("set_auto_attack")(*args)


def set_ccs(arg1: str) -> bool:
    return LibraryFunction("set_ccs")(arg1)


def set_length(arg1: str, arg2: int) -> None:
    return LibraryFunction("set_length")(arg1, arg2)


def set_location(arg1: Location) -> None:
    return LibraryFunction("set_location")(arg1)


def set_property(arg1: str, arg2: str) -> None:
    return LibraryFunction("set_property")(arg1, arg2)


def shop_amount(arg1: Item) -> int:
    return LibraryFunction("shop_amount")(arg1)


def shop_limit(arg1: Item) -> int:
    return LibraryFunction("shop_limit")(arg1)


def shop_price(arg1: Item) -> int:
    return LibraryFunction("shop_price")(arg1)


@overload
def skill_modifier(arg1: Item, arg2: Modifier) -> Skill:
    ...


@overload
def skill_modifier(arg1: Item, arg2: str) -> Skill:
    ...


@overload
def skill_modifier(arg1: str, arg2: Modifier) -> Skill:
    ...


@overload
def skill_modifier(arg1: str, arg2: str) -> Skill:
    ...


def skill_modifier(*args):
    return LibraryFunction("skill_modifier")(*args)


def slash_count(arg1: Item) -> int:
    return LibraryFunction("slash_count")(arg1)


def soulsauce_cost(arg1: Skill) -> int:
    return LibraryFunction("soulsauce_cost")(arg1)


def spleen_limit() -> int:
    return LibraryFunction("spleen_limit")()


def split_modifiers(arg1: str) -> dict[Modifier, str]:
    return LibraryFunction("split_modifiers")(arg1)


@overload
def split_string(arg1: str, arg2: str) -> dict[int, str]:
    ...


@overload
def split_string(arg1: str) -> dict[int, str]:
    ...


def split_string(*args):
    return LibraryFunction("split_string")(*args)


def square_root(arg1: float) -> float:
    return LibraryFunction("square_root")(arg1)


@overload
def start(arg1: Matcher, arg2: int) -> int:
    ...


@overload
def start(arg1: Matcher) -> int:
    ...


def start(*args):
    return LibraryFunction("start")(*args)


def starts_with(arg1: str, arg2: str) -> bool:
    return LibraryFunction("starts_with")(arg1, arg2)


def stash_amount(arg1: Item) -> int:
    return LibraryFunction("stash_amount")(arg1)


def stat_bonus_today() -> Stat:
    return LibraryFunction("stat_bonus_today")()


def stat_bonus_tomorrow() -> Stat:
    return LibraryFunction("stat_bonus_tomorrow")()


@overload
def stat_modifier(arg1: Effect, arg2: Modifier) -> Stat:
    ...


@overload
def stat_modifier(arg1: Effect, arg2: str) -> Stat:
    ...


def stat_modifier(*args):
    return LibraryFunction("stat_modifier")(*args)


def stats_pockets() -> dict[int, bool]:
    return LibraryFunction("stats_pockets")()


def steal() -> str:
    return LibraryFunction("steal")()


def stills_available() -> int:
    return LibraryFunction("stills_available")()


def stop_counter(arg1: str) -> None:
    return LibraryFunction("stop_counter")(arg1)


def storage_amount(arg1: Item) -> int:
    return LibraryFunction("storage_amount")(arg1)


@overload
def string_modifier(arg1: Effect, arg2: Modifier) -> str:
    ...


@overload
def string_modifier(arg1: Effect, arg2: str) -> str:
    ...


@overload
def string_modifier(arg1: Item, arg2: Modifier) -> str:
    ...


@overload
def string_modifier(arg1: Item, arg2: str) -> str:
    ...


@overload
def string_modifier(arg1: str, arg2: Modifier) -> str:
    ...


@overload
def string_modifier(arg1: str, arg2: str) -> str:
    ...


@overload
def string_modifier(arg1: Modifier) -> str:
    ...


@overload
def string_modifier(arg1: str) -> str:
    ...


def string_modifier(*args):
    return LibraryFunction("string_modifier")(*args)


def stun_skill() -> Skill:
    return LibraryFunction("stun_skill")()


@overload
def substring(arg1: str, arg2: int, arg3: int) -> str:
    ...


@overload
def substring(arg1: str, arg2: int) -> str:
    ...


def substring(*args):
    return LibraryFunction("substring")(*args)


def svn_at_head(arg1: str) -> bool:
    return LibraryFunction("svn_at_head")(arg1)


def svn_exists(arg1: str) -> bool:
    return LibraryFunction("svn_exists")(arg1)


def svn_info(arg1: str) -> dict[str, Any]:
    return LibraryFunction("svn_info")(arg1)


def svn_list() -> dict[int, str]:
    return LibraryFunction("svn_list")()


@overload
def sweet_synthesis(arg1: int, arg2: Item, arg3: Item) -> bool:
    ...


@overload
def sweet_synthesis(arg1: Item, arg2: Item) -> bool:
    ...


@overload
def sweet_synthesis(arg1: int, arg2: Effect, arg3: int) -> bool:
    ...


@overload
def sweet_synthesis(arg1: Effect, arg2: int) -> bool:
    ...


@overload
def sweet_synthesis(arg1: int, arg2: Effect) -> bool:
    ...


@overload
def sweet_synthesis(arg1: Effect) -> bool:
    ...


def sweet_synthesis(*args):
    return LibraryFunction("sweet_synthesis")(*args)


@overload
def sweet_synthesis_pair(arg1: Effect, arg2: int) -> dict[int, Item]:
    ...


@overload
def sweet_synthesis_pair(arg1: Effect) -> dict[int, Item]:
    ...


def sweet_synthesis_pair(*args):
    return LibraryFunction("sweet_synthesis_pair")(*args)


@overload
def sweet_synthesis_pairing(arg1: Effect, arg2: Item, arg3: int) -> dict[int, Item]:
    ...


@overload
def sweet_synthesis_pairing(arg1: Effect, arg2: Item) -> dict[int, Item]:
    ...


def sweet_synthesis_pairing(*args):
    return LibraryFunction("sweet_synthesis_pairing")(*args)


def sweet_synthesis_result(arg1: Item, arg2: Item) -> Effect:
    return LibraryFunction("sweet_synthesis_result")(arg1, arg2)


@overload
def take_closet(arg1: int, arg2: Item) -> bool:
    ...


@overload
def take_closet(arg1: Item, arg2: int) -> bool:
    ...


@overload
def take_closet(arg1: Item) -> bool:
    ...


@overload
def take_closet(arg1: int) -> bool:
    ...


def take_closet(*args):
    return LibraryFunction("take_closet")(*args)


@overload
def take_display(arg1: int, arg2: Item) -> bool:
    ...


@overload
def take_display(arg1: Item, arg2: int) -> bool:
    ...


def take_display(*args):
    return LibraryFunction("take_display")(*args)


@overload
def take_shop(arg1: int, arg2: Item) -> bool:
    ...


@overload
def take_shop(arg1: Item) -> bool:
    ...


def take_shop(*args):
    return LibraryFunction("take_shop")(*args)


@overload
def take_stash(arg1: int, arg2: Item) -> bool:
    ...


@overload
def take_stash(arg1: Item, arg2: int) -> bool:
    ...


def take_stash(*args):
    return LibraryFunction("take_stash")(*args)


@overload
def take_storage(arg1: int, arg2: Item) -> bool:
    ...


@overload
def take_storage(arg1: Item, arg2: int) -> bool:
    ...


def take_storage(*args):
    return LibraryFunction("take_storage")(*args)


@overload
def tavern(arg1: str) -> int:
    ...


@overload
def tavern() -> int:
    ...


def tavern(*args):
    return LibraryFunction("tavern")(*args)


def throw_item(arg1: Item) -> str:
    return LibraryFunction("throw_item")(arg1)


def throw_items(arg1: Item, arg2: Item) -> str:
    return LibraryFunction("throw_items")(arg1, arg2)


def thunder_cost(arg1: Skill) -> int:
    return LibraryFunction("thunder_cost")(arg1)


def time_to_string() -> str:
    return LibraryFunction("time_to_string")()


def timestamp_to_date(arg1: int, arg2: str) -> str:
    return LibraryFunction("timestamp_to_date")(arg1, arg2)


@overload
def to_boolean(arg1: int) -> bool:
    ...


@overload
def to_boolean(arg1: bool) -> bool:
    ...


@overload
def to_boolean(arg1: str) -> bool:
    ...


def to_boolean(*args):
    return LibraryFunction("to_boolean")(*args)


def to_bounty(arg1: str) -> Bounty:
    return LibraryFunction("to_bounty")(arg1)


@overload
def to_class(arg1: int) -> Class:
    ...


@overload
def to_class(arg1: str) -> Class:
    ...


def to_class(*args):
    return LibraryFunction("to_class")(*args)


def to_coinmaster(arg1: str) -> Coinmaster:
    return LibraryFunction("to_coinmaster")(arg1)


@overload
def to_effect(arg1: Skill) -> Effect:
    ...


@overload
def to_effect(arg1: int) -> Effect:
    ...


@overload
def to_effect(arg1: str) -> Effect:
    ...


def to_effect(*args):
    return LibraryFunction("to_effect")(*args)


def to_element(arg1: str) -> Element:
    return LibraryFunction("to_element")(arg1)


@overload
def to_familiar(arg1: int) -> Familiar:
    ...


@overload
def to_familiar(arg1: str) -> Familiar:
    ...


def to_familiar(*args):
    return LibraryFunction("to_familiar")(*args)


@overload
def to_float(arg1: float) -> float:
    ...


@overload
def to_float(arg1: int) -> float:
    ...


@overload
def to_float(arg1: bool) -> float:
    ...


@overload
def to_float(arg1: str) -> float:
    ...


def to_float(*args):
    return LibraryFunction("to_float")(*args)


@overload
def to_int(arg1: Path) -> int:
    ...


@overload
def to_int(arg1: Vykea) -> int:
    ...


@overload
def to_int(arg1: Servant) -> int:
    ...


@overload
def to_int(arg1: Thrall) -> int:
    ...


@overload
def to_int(arg1: Monster) -> int:
    ...


@overload
def to_int(arg1: Class) -> int:
    ...


@overload
def to_int(arg1: Effect) -> int:
    ...


@overload
def to_int(arg1: Skill) -> int:
    ...


@overload
def to_int(arg1: Location) -> int:
    ...


@overload
def to_int(arg1: Familiar) -> int:
    ...


@overload
def to_int(arg1: Item) -> int:
    ...


@overload
def to_int(arg1: float) -> int:
    ...


@overload
def to_int(arg1: int) -> int:
    ...


@overload
def to_int(arg1: bool) -> int:
    ...


@overload
def to_int(arg1: str) -> int:
    ...


def to_int(*args):
    return LibraryFunction("to_int")(*args)


@overload
def to_item(arg1: str, arg2: int) -> Item:
    ...


@overload
def to_item(arg1: int) -> Item:
    ...


@overload
def to_item(arg1: str) -> Item:
    ...


def to_item(*args):
    return LibraryFunction("to_item")(*args)


def to_json(arg1: Any) -> str:
    return LibraryFunction("to_json")(arg1)


@overload
def to_location(arg1: int) -> Location:
    ...


@overload
def to_location(arg1: str) -> Location:
    ...


def to_location(*args):
    return LibraryFunction("to_location")(*args)


def to_lower_case(arg1: str) -> str:
    return LibraryFunction("to_lower_case")(arg1)


@overload
def to_monster(arg1: int) -> Monster:
    ...


@overload
def to_monster(arg1: str) -> Monster:
    ...


def to_monster(*args):
    return LibraryFunction("to_monster")(*args)


@overload
def to_path(arg1: int) -> Path:
    ...


@overload
def to_path(arg1: str) -> Path:
    ...


def to_path(*args):
    return LibraryFunction("to_path")(*args)


def to_phylum(arg1: str) -> Phylum:
    return LibraryFunction("to_phylum")(arg1)


def to_plural(arg1: Item) -> str:
    return LibraryFunction("to_plural")(arg1)


@overload
def to_servant(arg1: int) -> Servant:
    ...


@overload
def to_servant(arg1: str) -> Servant:
    ...


def to_servant(*args):
    return LibraryFunction("to_servant")(*args)


@overload
def to_skill(arg1: Effect) -> Skill:
    ...


@overload
def to_skill(arg1: int) -> Skill:
    ...


@overload
def to_skill(arg1: str, arg2: str) -> Skill:
    ...


@overload
def to_skill(arg1: str) -> Skill:
    ...


def to_skill(*args):
    return LibraryFunction("to_skill")(*args)


@overload
def to_slot(arg1: Item) -> Slot:
    ...


@overload
def to_slot(arg1: str) -> Slot:
    ...


def to_slot(*args):
    return LibraryFunction("to_slot")(*args)


def to_stat(arg1: str) -> Stat:
    return LibraryFunction("to_stat")(arg1)


@overload
def to_string(arg1: float, arg2: str) -> str:
    ...


@overload
def to_string(arg1: int, arg2: str) -> str:
    ...


@overload
def to_string(arg1: str) -> str:
    ...


def to_string(*args):
    return LibraryFunction("to_string")(*args)


@overload
def to_thrall(arg1: int) -> Thrall:
    ...


@overload
def to_thrall(arg1: str) -> Thrall:
    ...


def to_thrall(*args):
    return LibraryFunction("to_thrall")(*args)


def to_upper_case(arg1: str) -> str:
    return LibraryFunction("to_upper_case")(arg1)


def to_url(arg1: Location) -> str:
    return LibraryFunction("to_url")(arg1)


def to_vykea(arg1: str) -> Vykea:
    return LibraryFunction("to_vykea")(arg1)


@overload
def to_wiki_url(arg1: Monster) -> str:
    ...


@overload
def to_wiki_url(arg1: Skill) -> str:
    ...


@overload
def to_wiki_url(arg1: Effect) -> str:
    ...


@overload
def to_wiki_url(arg1: Item) -> str:
    ...


@overload
def to_wiki_url(arg1: str) -> str:
    ...


def to_wiki_url(*args):
    return LibraryFunction("to_wiki_url")(*args)


def today_to_string() -> str:
    return LibraryFunction("today_to_string")()


def total_free_rests() -> int:
    return LibraryFunction("total_free_rests")()


def total_turns_played() -> int:
    return LibraryFunction("total_turns_played")()


def tower_door() -> bool:
    return LibraryFunction("tower_door")()


def traceprint(arg1: str) -> None:
    return LibraryFunction("traceprint")(arg1)


def truncate(arg1: float) -> int:
    return LibraryFunction("truncate")(arg1)


def turns_per_cast(arg1: Skill) -> int:
    return LibraryFunction("turns_per_cast")(arg1)


def turns_played() -> int:
    return LibraryFunction("turns_played")()


def twiddle() -> str:
    return LibraryFunction("twiddle")()


def unusual_construct_disc() -> Item:
    return LibraryFunction("unusual_construct_disc")()


def update_candy_prices() -> None:
    return LibraryFunction("update_candy_prices")()


def url_decode(arg1: str) -> str:
    return LibraryFunction("url_decode")(arg1)


def url_encode(arg1: str) -> str:
    return LibraryFunction("url_encode")(arg1)


@overload
def use(arg1: int, arg2: Item) -> bool:
    ...


@overload
def use(arg1: Item, arg2: int) -> bool:
    ...


@overload
def use(arg1: Item) -> bool:
    ...


def use(*args):
    return LibraryFunction("use")(*args)


def use_familiar(arg1: Familiar) -> bool:
    return LibraryFunction("use_familiar")(arg1)


def use_servant(arg1: Servant) -> bool:
    return LibraryFunction("use_servant")(arg1)


@overload
def use_skill(arg1: Skill) -> str:
    ...


@overload
def use_skill(arg1: int, arg2: Skill, arg3: str) -> bool:
    ...


@overload
def use_skill(arg1: Skill, arg2: int, arg3: str) -> bool:
    ...


@overload
def use_skill(arg1: int, arg2: Skill) -> bool:
    ...


@overload
def use_skill(arg1: Skill, arg2: int) -> bool:
    ...


def use_skill(*args):
    return LibraryFunction("use_skill")(*args)


@overload
def user_confirm(arg1: str, arg2: int, arg3: bool) -> bool:
    ...


@overload
def user_confirm(arg1: str) -> bool:
    ...


def user_confirm(*args):
    return LibraryFunction("user_confirm")(*args)


@overload
def user_notify(arg1: str, arg2: bool) -> None:
    ...


@overload
def user_notify(arg1: str) -> None:
    ...


def user_notify(*args):
    return LibraryFunction("user_notify")(*args)


@overload
def user_prompt(arg1: str, arg2: int, arg3: str) -> str:
    ...


@overload
def user_prompt(arg1: str, arg2: dict[Any, Any]) -> str:
    ...


@overload
def user_prompt(arg1: str) -> str:
    ...


def user_prompt(*args):
    return LibraryFunction("user_prompt")(*args)


def visit(arg1: Coinmaster) -> bool:
    return LibraryFunction("visit")(arg1)


@overload
def visit_url(arg1: str, arg2: bool, arg3: bool) -> str:
    ...


@overload
def visit_url(arg1: str, arg2: bool) -> str:
    ...


@overload
def visit_url(arg1: str) -> str:
    ...


@overload
def visit_url() -> str:
    ...


def visit_url(*args):
    return LibraryFunction("visit_url")(*args)


@overload
def voting_booth_initiatives(arg1: int, arg2: int, arg3: int) -> dict[str, bool]:
    ...


@overload
def voting_booth_initiatives(arg1: Class, arg2: Path, arg3: int) -> dict[str, bool]:
    ...


def voting_booth_initiatives(*args):
    return LibraryFunction("voting_booth_initiatives")(*args)


def wait(arg1: int) -> None:
    return LibraryFunction("wait")(arg1)


def waitq(arg1: int) -> None:
    return LibraryFunction("waitq")(arg1)


def weapon_hands(arg1: Item) -> int:
    return LibraryFunction("weapon_hands")(arg1)


def weapon_type(arg1: Item) -> Stat:
    return LibraryFunction("weapon_type")(arg1)


def weight_adjustment() -> int:
    return LibraryFunction("weight_adjustment")()


def well_stocked(arg1: str, arg2: int, arg3: int) -> bool:
    return LibraryFunction("well_stocked")(arg1, arg2, arg3)


def white_citadel_available() -> bool:
    return LibraryFunction("white_citadel_available")()


def who_clan() -> dict[str, bool]:
    return LibraryFunction("who_clan")()


def will_usually_dodge() -> bool:
    return LibraryFunction("will_usually_dodge")()


def will_usually_miss() -> bool:
    return LibraryFunction("will_usually_miss")()


def write(arg1: str) -> None:
    return LibraryFunction("write")(arg1)


def write_ccs(arg1: str, arg2: str) -> bool:
    return LibraryFunction("write_ccs")(arg1, arg2)


def writeln(arg1: str) -> None:
    return LibraryFunction("writeln")(arg1)


def xpath(arg1: str, arg2: str) -> dict[int, str]:
    return LibraryFunction("xpath")(arg1, arg2)


def zap(arg1: Item) -> Item:
    return LibraryFunction("zap")(arg1)
